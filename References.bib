@inproceedings{Futhark,
  author = {Bruun, Lotte Maria and Larsen, Ulrik Stuhr and Hinnerskov, Nikolaj
            Hey and Oancea, Cosmin Eugen},
  title = {Reverse-Mode AD of Multi-Reduce and Scan in Futhark},
  year = {2024},
  isbn = {9798400716317},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  %url = {https://doi.org/10.1145/3652561.3652575},%
  doi = {10.1145/3652561.3652575},
  abstract = {We present and evaluate the Futhark implementation of reverse-mode
              automatic differentiation (AD) for the basic blocks of parallel
              programming: reduce, prefix sum (scan), and reduce-by-index
              (multi-reduce). We present derivations of general-case algorithms,
              and then discuss several specializations that result in efficient
              differentiation of most cases of practical interest. We report an
              experiment that evaluates the GPU performance of the differentiated
              code and highlights the impact of the proposed specializations as
              well as the strengths and weaknesses of differentiating at high
              level bulk-parallel operators vs “differentiating the memory”, i.e.
              , low-level implementations that access/update individual array
              elements.},
  booktitle = {Proceedings of the 35th Symposium on Implementation and
               Application of Functional Languages},
  articleno = {14},
  numpages = {14},
  location = {Braga, Portugal},
  series = {IFL '23},
}
@inproceedings{PPAD,
  author = {Paszke, Adam and Johnson, Matthew J. and Frostig, Roy and Maclaurin,
            Dougal},
  title = {Parallelism-preserving automatic differentiation for second-order
           array languages},
  year = {2021},
  isbn = {9781450386142},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  %url = {https://doi.org/10.1145/3471873.3472975},%
  doi = {10.1145/3471873.3472975},
  abstract = {We develop automatic differentiation (AD) procedures for
              reductions and scans—parameterized by arbitrary differentiable
              monoids—in a way that preserves parallelism, by rewriting them as
              other reductions and scans. This is in contrast with the literature
              and with existing AD systems, which are either general, but force
              sequential execution of the derivative program, or only include
              hand-crafted rules for a select few monoids (usually (0, +), (1,
              \texttimes{}), (−∞, max) and (∞, min)) and thus lack the general
              flexibility of second-order languages.},
  booktitle = {Proceedings of the 9th ACM SIGPLAN International Workshop on
               Functional High-Performance and Numerical Computing},
  pages = {13–23},
  numpages = {11},
  keywords = {second-order array languages, scan, reduce, Automatic
              differentiation},
  location = {Virtual, Republic of Korea},
  series = {FHPNC 2021},
}

      

